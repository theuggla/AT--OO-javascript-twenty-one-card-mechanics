{
	"info": {
		"name": "TravelTogetherAPI",
		"_postman_id": "55f70a21-92e1-8865-a4c2-a85d5d789150",
		"description": "A collection to test the Travel Together API.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/",
			"description": "Test the result of API calls to the root.",
			"item": [
				{
					"name": "GET - 200 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "598819db-1de5-4f7e-b64a-b714c541f8dd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Unauthenticated root returns authentication link\", function () {",
									"    var jsonData = pm.response.json();",
									"    var id = environment.USER1_ID;",
									"    pm.expect(jsonData.relatedLinks).to.contain(\"/authenticate\");",
									"});",
									"",
									"pm.test(\"Unauthenticated root returns planned trips link\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.relatedLinks).to.contain(\"/plannedtrips\");",
									"});",
									"",
									"pm.test(\"Unthenticated root does not return user link\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.relatedLinks).to.not.contain(\"/users\");",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"    pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}",
							"host": [
								"{{ROOT_URL}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 406 - Wrong Accept Header",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7677cee-369a-41d4-9788-58272e83adf4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 406\", function () {",
									"    pm.response.to.have.status(406);",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/ecmascript"
							}
						],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}",
							"host": [
								"{{ROOT_URL}}"
							]
						},
						"description": "Root with wrong accept-header"
					},
					"response": []
				},
				{
					"name": "OPTIONS - 200 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71866fa7-9429-4559-865f-0043344a9a60",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Access-Control-Allow-Methods is present\", function () {",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");",
									"});",
									"",
									"tests[\"Access-Control-Allow-Methods are correct\"] = postman.getResponseHeader(\"Access-Control-Allow-Methods\") === \"GET, HEAD, OPTIONS\";"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}",
							"host": [
								"{{ROOT_URL}}"
							]
						},
						"description": "OPTIONS - 200 - Unauthenticated"
					},
					"response": []
				},
				{
					"name": "OPTIONS - 200 - Authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f6bd940-84ef-4747-8ac2-0a81cc9e506c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Access-Control-Allow-Methods is present\", function () {",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");",
									"});",
									"",
									"tests[\"Access-Control-Allow-Methods are correct\"] = postman.getResponseHeader(\"Access-Control-Allow-Methods\") === \"GET, HEAD, OPTIONS\";"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}",
							"host": [
								"{{ROOT_URL}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 200 - Authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7bd57e02-c8e4-4297-b1aa-59beb7a8d177",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Authenticated root returns user link\", function () {",
									"    var jsonData = pm.response.json();",
									"    var id = environment.USER1_ID;",
									"    pm.expect(jsonData.relatedLinks).to.contain(\"/users/\" + id);",
									"});",
									"",
									"pm.test(\"Authenticated root returns planned trips link\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.relatedLinks).to.contain(\"/plannedtrips\");",
									"});",
									"",
									"pm.test(\"Authenticated root does not return authenticate link\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.relatedLinks).to.not.contain(\"/authenticate\");",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"    pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}",
							"host": [
								"{{ROOT_URL}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "/authenticate",
			"description": "Tests the authorization roots.",
			"item": [
				{
					"name": "GET - 200 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43dd701a-728a-4206-b486-5536ecb65bc4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns POST operation request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"hydra:operation\"][\"hydra:method\"]).to.eql(\"POST\");",
									"});",
									"",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/authenticate",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"authenticate"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 200 - Authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43dd701a-728a-4206-b486-5536ecb65bc4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns POST operation request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"hydra:operation\"][\"hydra:method\"]).to.eql(\"POST\");",
									"});",
									"",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/authenticate",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"authenticate"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "OPTIONS - 200 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6b849a4-678c-4bc7-8cfa-ec8fa51ddf14",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Access-Control-Allow-Methods is present\", function () {",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");",
									"});",
									"",
									"tests[\"Access-Control-Allow-Methods are correct\"] = postman.getResponseHeader(\"Access-Control-Allow-Methods\") === \"GET, POST, HEAD, OPTIONS\";"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/authenticate",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"authenticate"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "OPTIONS - 200 - Authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6b849a4-678c-4bc7-8cfa-ec8fa51ddf14",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Access-Control-Allow-Methods is present\", function () {",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");",
									"});",
									"",
									"tests[\"Access-Control-Allow-Methods are correct\"] = postman.getResponseHeader(\"Access-Control-Allow-Methods\") === \"GET, POST, HEAD, OPTIONS\";"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/authenticate",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"authenticate"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST - 400 - No Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27371e51-2f25-4fa9-907a-55dbb562d6dd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"});",
									"",
									"pm.test(\"Correct error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    var id = environment.USER1_ID;",
									"    pm.expect(jsonData.message).to.contain(\"No credentials provided for login\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/authenticate",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"authenticate"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST - 200 - Correct Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19831624-4e15-4af6-8ffc-f8531c720b46",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"});",
									"",
									"pm.test(\"Correct login returns user link\", function () {",
									"    var jsonData = pm.response.json();",
									"    var id = environment.USER2_ID;",
									"    pm.expect(jsonData.relatedLinks).to.contain(\"/users/\" + id);",
									"});",
									"",
									"pm.test(\"Correct login returns planned trips link\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.relatedLinks).to.contain(\"/plannedtrips\");",
									"});",
									"",
									"pm.test(\"Correct login returns Authorization header\", function () {",
									"    pm.response.to.have.header(\"Authorization\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\": \"{{USER2_EMAIL}}\", \"password\": \"{{USER2_PASSWORD}}\"}"
						},
						"url": {
							"raw": "{{ROOT_URL}}/authenticate",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"authenticate"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST - 401 - Wrong Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa0f5f40-6097-49fb-9131-227b22285d96",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"});",
									"",
									"pm.test(\"Correct error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    var id = environment.USER1_ID;",
									"    pm.expect(jsonData.message).to.contain(\"Wrong credentials\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\": \"{{USER1_EMAIL}}\", \"password\": \"wrongpassword\"}"
						},
						"url": {
							"raw": "{{ROOT_URL}}/authenticate",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"authenticate"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST - 401 - Wrong Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa0f5f40-6097-49fb-9131-227b22285d96",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"});",
									"",
									"pm.test(\"Correct error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    var id = environment.USER1_ID;",
									"    pm.expect(jsonData.message).to.contain(\"Wrong credentials\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\": \"wrongemail\", \"password\": \"{{USER1_PASSWORD}}\"}"
						},
						"url": {
							"raw": "{{ROOT_URL}}/authenticate",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"authenticate"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "/users",
			"description": "Tests for the users route.",
			"item": [
				{
					"name": "OPTIONS - 401 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b76eb9dd-dccd-4ba3-ad00-b0539b636f4e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "OPTIONS - 200 - Authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "79b30cd7-d540-4114-96bd-100a53a23c8f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Access-Control-Allow-Methods is present\", function () {",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");",
									"});",
									"",
									"tests[\"Access-Control-Allow-Methods are correct\"] = postman.getResponseHeader(\"Access-Control-Allow-Methods\") === \"GET, HEAD, OPTIONS\";"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 401 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82bed8ab-3b93-4eae-bd8b-b93e70dd69cf",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 200 - Authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31e72fb6-6494-47a4-a50d-749f4c8e5dc2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains user list\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.users).to.exist;",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "/users/:id",
			"description": "Tests for specific user routes.",
			"item": [
				{
					"name": "OPTIONS - 401 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86a44733-9a5c-4a9a-a234-21cbe91b7867",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "OPTIONS - 200 - Authenticated - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "badffb97-14e3-4811-880e-cb0f4dc823a9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Access-Control-Allow-Methods is present\", function () {",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");",
									"});",
									"",
									"tests[\"Access-Control-Allow-Methods are correct\"] = postman.getResponseHeader(\"Access-Control-Allow-Methods\") === \"GET, PUT, HEAD, OPTIONS\";"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "OPTIONS - 200 - Authenticated - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f2ce3c4-8152-48bc-a84f-b17492694eec",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Access-Control-Allow-Methods is present\", function () {",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");",
									"});",
									"",
									"tests[\"Access-Control-Allow-Methods are correct\"] = postman.getResponseHeader(\"Access-Control-Allow-Methods\") === \"GET, HEAD, OPTIONS\";"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER2_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 401 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86a44733-9a5c-4a9a-a234-21cbe91b7867",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 200 - Authenticated - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "44000f60-3bcf-4371-8f46-4e627a8b6495",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns PUT operation request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"hydra:operation\"][0][\"hydra:method\"]).to.eql(\"PUT\");",
									"});",
									"",
									"pm.test(\"Returns DELETE operation request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"hydra:operation\"][1][\"hydra:method\"]).to.eql(\"DELETE\");",
									"});",
									"",
									"pm.test(\"Returns driver of\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.driverOf).to.exist;",
									"});",
									"",
									"pm.test(\"Returns passenger of\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.passengerOf).to.exist;",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"    pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"})",
									"",
									"pm.test(\"Authenticated user returns user link\", function () {",
									"    var jsonData = pm.response.json();",
									"    var id = environment.USER1_ID;",
									"    pm.expect(jsonData[\"@id\"]).to.eql(\"/users/\" + id);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 200 - Authenticated - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fbaa1362-2155-4a50-ab8a-08904ca55c48",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Does not return any operation requests\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"hydra:operation\"]).to.not.exist;",
									"});",
									"",
									"pm.test(\"Does not return driver of\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.driverOf).to.not.exist;",
									"});",
									"",
									"pm.test(\"Does not return passenger of\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.passengerOf).to.not.exist;",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"    pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"})",
									"",
									"pm.test(\"Unauthenticated user returns user link for user viewed\", function () {",
									"    var jsonData = pm.response.json();",
									"    var id = environment.USER1_ID;",
									"    pm.expect(jsonData[\"@id\"]).to.eql(\"/users/\" + id);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER2_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "PUT - 401 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86a44733-9a5c-4a9a-a234-21cbe91b7867",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "PUT - 403 - Authenticated - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3190422a-644c-4e57-b43b-f1118b1856bc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"})",
									"",
									"pm.test(\"Message is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER2_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "PUT - 415 - Authenticated - Authorized - Unsupported Media Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30953adc-b5ff-4288-823a-7b31db0b63dc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 415\", function () {",
									"    pm.response.to.have.status(415);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Otto El Kabir\"}"
						},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "PUT - 204 - Authenticated - Authorized - With Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41d1be86-e273-4cdb-8845-61eb44fe0e5b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"pm.test(\"Otto is updated\", function () {",
									"    pm.sendRequest(environment.ROOT_URL + \"/users/\" + environment.USER1_ID, function (err, response) {",
									"    var jsonData = response.json();",
									"    pm.expect(jsonData.name).to.eql(\"otto\");",
									"});",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Otto El Kabir\"}"
						},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "/users/:id/driving",
			"description": "Tests for the /driving routes under a specific user.",
			"item": [
				{
					"name": "OPTIONS - 401 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86a44733-9a5c-4a9a-a234-21cbe91b7867",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}/driving",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}",
								"driving"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "OPTIONS - 200 - Authenticated - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be383522-2d94-46e9-a038-f2150611b340",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Access-Control-Allow-Methods is present\", function () {",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");",
									"});",
									"",
									"tests[\"Access-Control-Allow-Methods are correct\"] = postman.getResponseHeader(\"Access-Control-Allow-Methods\") === \"GET, POST, HEAD, OPTIONS\";"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}/driving",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}",
								"driving"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "OPTIONS - 403 - Authenticated - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e66a45f7-15ed-42be-a73a-f21dd2a75c90",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Access-Control-Allow-Methods is not present\", function () {",
									"    pm.response.to.not.have.header(\"Access-Control-Allow-Methods\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER2_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}/driving",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}",
								"driving"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 401 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86a44733-9a5c-4a9a-a234-21cbe91b7867",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}/driving",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}",
								"driving"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 200 - Authenticated - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f27123df-e772-4083-8ad8-befb25ada767",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns POST operation request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"hydra:operation\"][\"hydra:method\"]).to.eql(\"POST\");",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"    pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"})",
									"",
									"pm.test(\"Authenticated user returns trip list as hydra members\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"hydra:member\"]).to.exist;",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER2_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER2_ID}}/driving",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER2_ID}}",
								"driving"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 403 - Authenticated - Unauthorized copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "efc38004-ab13-4dbd-a7de-c2857cc28b50",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"})",
									"",
									"pm.test(\"Message is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"message\"]).to.eql(\"Forbidden\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER2_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}/driving",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}",
								"driving"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST - 401 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86a44733-9a5c-4a9a-a234-21cbe91b7867",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}/driving",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}",
								"driving"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST - 201 - Authenticated - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da73b45e-bb0b-42a7-b560-0625a84cd354",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Returns link pointing to new resource\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.created_at).to.exist;",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"from\": \"Karlstad\", \"to\": \"Umeå\", \"seats\": 3, \"time\": \"2018, 1, 18\"}"
						},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}/driving",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}",
								"driving"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST - 403 - Authenticated - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3190422a-644c-4e57-b43b-f1118b1856bc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"})",
									"",
									"pm.test(\"Message is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER2_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}/driving",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}",
								"driving"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST - 400 - Authenticated - Authorized - Missing Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1f3a974-7514-4714-bb71-6810d25fd553",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"from\": \"Gothenburg\", \"to\": \"Molkom\", \"seats\": 3}"
						},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}/driving",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}",
								"driving"
							]
						},
						"description": ""
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "25cd16cc-8bf6-4d7f-bc1d-40d4cebc8458",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7aa5688d-0638-43a9-b5cf-cda70dd34a73",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "/users/:id/passenger",
			"description": "Tests for the passenger routes under a specific user. ",
			"item": [
				{
					"name": "OPTIONS - 401 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86a44733-9a5c-4a9a-a234-21cbe91b7867",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}/passenger",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}",
								"passenger"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "OPTIONS - 200 - Authenticated - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32f497a7-28ce-4ad9-b0de-7b328559d713",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Access-Control-Allow-Methods is present\", function () {",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");",
									"});",
									"",
									"tests[\"Access-Control-Allow-Methods are correct\"] = postman.getResponseHeader(\"Access-Control-Allow-Methods\") === \"GET, HEAD, OPTIONS\";"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}/passenger",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}",
								"passenger"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "OPTIONS - 403 - Authenticated - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e66a45f7-15ed-42be-a73a-f21dd2a75c90",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Access-Control-Allow-Methods is not present\", function () {",
									"    pm.response.to.not.have.header(\"Access-Control-Allow-Methods\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER2_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}/passenger",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}",
								"passenger"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 401 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86a44733-9a5c-4a9a-a234-21cbe91b7867",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}/passenger",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}",
								"passenger"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 403 - Authenticated - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "efc38004-ab13-4dbd-a7de-c2857cc28b50",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"})",
									"",
									"pm.test(\"Message is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"message\"]).to.eql(\"Forbidden\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER2_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER1_ID}}/passenger",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER1_ID}}",
								"passenger"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 200 - Authenticated - Authorized copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94f1516a-af4f-4f42-8d62-e1855086b3ae",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"    pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"})",
									"",
									"pm.test(\"Authenticated user returns trip list as hydra members\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"hydra:member\"]).to.exist;",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER2_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/users/{{USER2_ID}}/passenger",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"users",
								"{{USER2_ID}}",
								"passenger"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "/plannedtrips",
			"description": "Tests for the /plannedtrips route.",
			"item": [
				{
					"name": "OPTIONS - 200 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb09e5f3-7973-4932-8084-f9505fced50b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Access-Control-Allow-Methods is present\", function () {",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");",
									"});",
									"",
									"tests[\"Access-Control-Allow-Methods are correct\"] = postman.getResponseHeader(\"Access-Control-Allow-Methods\") === \"GET, HEAD, OPTIONS\";"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "OPTIONS - 200 - Authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32f497a7-28ce-4ad9-b0de-7b328559d713",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Access-Control-Allow-Methods is present\", function () {",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");",
									"});",
									"",
									"tests[\"Access-Control-Allow-Methods are correct\"] = postman.getResponseHeader(\"Access-Control-Allow-Methods\") === \"GET, HEAD, OPTIONS\";"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 200 - Authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2a9e449-20b4-41bf-9169-5e1ca718dbe7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"})",
									"",
									"pm.test(\"Body has triplist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"plannedTrips\"]).to.exist;",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 200 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2a9e449-20b4-41bf-9169-5e1ca718dbe7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"})",
									"",
									"pm.test(\"Body has triplist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"plannedTrips\"]).to.exist;",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "/plannedtrips/webhook",
			"description": "Tests for the webhook.",
			"item": [
				{
					"name": "OPTIONS - 401 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc9682a5-6be5-41c3-83d0-1cfd1ab02a94",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/webhook",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"webhook"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "OPTIONS - 200 - Authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01e291d4-fb84-421c-8bff-965be3888385",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Access-Control-Allow-Methods is present\", function () {",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");",
									"});",
									"",
									"tests[\"Access-Control-Allow-Methods are correct\"] = postman.getResponseHeader(\"Access-Control-Allow-Methods\") === \"GET, POST, HEAD, OPTIONS\";"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/webhook",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"webhook"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 200 - Authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98caaa2c-4728-4aa7-812f-a7d6aa4b300c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"})",
									"",
									"pm.test(\"Body has suggested operation POST\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"hydra:operation\"][\"hydra:method\"]).to.eql(\"POST\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/webhook",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"webhook"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 401 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4339275c-1251-4d37-a043-8b7ea34bf742",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/webhook",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"webhook"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST - 401 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4339275c-1251-4d37-a043-8b7ea34bf742",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/webhook",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"webhook"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST - 201 - Authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e1d4626-3bfd-451b-97c0-837c25735bc8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"callbackURL\": \"{{LOCALHOST}}\"}"
						},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/webhook",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"webhook"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "/plannedtrips/:id",
			"description": "Tests for specific trips.",
			"item": [
				{
					"name": "chained-delete-request",
					"description": "Chaining a post and a delete request to the API to test the delete function.",
					"item": [
						{
							"name": "Create Trip and Set Variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fe1a01a-11af-4a8a-9822-1891c2eaf7cd",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Returns link pointing to new resource\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.created_at).to.exist;",
											"});",
											"",
											"pm.test(\"Body is valid\", function () {",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json",
											"});",
											"",
											"",
											"pm.environment.set(\"testtrip\", pm.response.json().created_at);"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER3_JWT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"from\": \"Månen\", \"to\": \"Geneve\", \"seats\": 3, \"time\": \"2018, 1, 18\"}"
								},
								"url": {
									"raw": "{{ROOT_URL}}/users/{{USER3_ID}}/driving",
									"host": [
										"{{ROOT_URL}}"
									],
									"path": [
										"users",
										"{{USER3_ID}}",
										"driving"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify that resource exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "063cb5ba-92a6-4b36-9e7d-10db34e4eea1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Returns PUT operation request\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"hydra:operation\"][0][\"hydra:method\"]).to.eql(\"PUT\");",
											"});",
											"",
											"pm.test(\"Returns DELETE operation request\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"hydra:operation\"][1][\"hydra:method\"]).to.eql(\"DELETE\");",
											"});",
											"",
											"pm.test(\"Returns passengers\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.passengers).to.exist;",
											"});",
											"",
											"pm.test(\"Is from Månen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.from).to.eql(\"Månen\");",
											"});",
											"",
											"pm.test(\"Body is valid\", function () {",
											"    pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json",
											"})"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER3_JWT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{ROOT_URL}}{{testtrip}}",
									"host": [
										"{{ROOT_URL}}{{testtrip}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Delete resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f02975e1-1046-48d7-ba82-31212f6b6169",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER3_JWT}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{ROOT_URL}}{{testtrip}}",
									"host": [
										"{{ROOT_URL}}{{testtrip}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify that resource is deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9bd2a6a-4993-4732-85de-13baee35f1ec",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER3_JWT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{ROOT_URL}}{{testtrip}}",
									"host": [
										"{{ROOT_URL}}{{testtrip}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "OPTIONS - 401 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18d352ae-cdd5-4c52-b70f-3db541e299a9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"{{TRIP1_ID_USER3_DRIVER}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "OPTIONS - 200 - Authenticated - Authorized - Driver",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d60e583d-433d-469a-b871-843e77b0e323",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Access-Control-Allow-Methods is present\", function () {",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");",
									"});",
									"",
									"tests[\"Access-Control-Allow-Methods are correct\"] = postman.getResponseHeader(\"Access-Control-Allow-Methods\") === \"GET, DELETE, PUT, HEAD, OPTIONS\";"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER3_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"{{TRIP1_ID_USER3_DRIVER}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "OPTIONS - 200 - Authenticated - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "192f953c-a599-475f-808f-dbab36a0e8dd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Access-Control-Allow-Methods is present\", function () {",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");",
									"});",
									"",
									"tests[\"Access-Control-Allow-Methods are correct\"] = postman.getResponseHeader(\"Access-Control-Allow-Methods\") === \"GET, HEAD, OPTIONS\";"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"{{TRIP1_ID_USER3_DRIVER}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 401 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86a44733-9a5c-4a9a-a234-21cbe91b7867",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"{{TRIP1_ID_USER3_DRIVER}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 200 - Authenticated - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d2c908c-08e6-4fcf-accc-ab71a888f0e0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns PUT operation request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"hydra:operation\"][0][\"hydra:method\"]).to.eql(\"PUT\");",
									"});",
									"",
									"pm.test(\"Returns DELETE operation request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"hydra:operation\"][1][\"hydra:method\"]).to.eql(\"DELETE\");",
									"});",
									"",
									"pm.test(\"Returns passengers\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.passengers).to.exist;",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"    pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"})"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER3_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"{{TRIP1_ID_USER3_DRIVER}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 200 - Authenticated - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dfd5585d-8655-4076-8c90-4521a0d5f2cb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Does not return any operation requests\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"hydra:operation\"]).to.not.exist;",
									"});",
									"",
									"pm.test(\"Does not return passengers\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.passengers).to.not.exist;",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"    pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"})"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"{{TRIP1_ID_USER3_DRIVER}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "PUT - 401 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86a44733-9a5c-4a9a-a234-21cbe91b7867",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"{{TRIP1_ID_USER3_DRIVER}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "PUT - 403 - Authenticated - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3190422a-644c-4e57-b43b-f1118b1856bc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"})",
									"",
									"pm.test(\"Message is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"{{TRIP1_ID_USER3_DRIVER}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "PUT - 204 - Authenticated - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ddd4e6b-69fe-40cc-8d8f-1c5f588e98b0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Trip is updated\", function () {",
									"    pm.sendRequest(environment.ROOT_URL + \"/plannedtrips/\" + environment.TRIP1_ID_USER3_DRIVER, function (err, response) {",
									"    var jsonData = response.json();",
									"    pm.expect(jsonData.from).to.eql(\"Landskrona\");",
									"});",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER3_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"from\": \"Landskrona\", \"to\": \"Jönköping\", \"seats\": 4, \"time\": \"2019, 1, 18\"}"
						},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"{{TRIP1_ID_USER3_DRIVER}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "DELETE - 401 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86a44733-9a5c-4a9a-a234-21cbe91b7867",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"{{TRIP1_ID_USER3_DRIVER}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "DELETE - 403 - Authenticated - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3190422a-644c-4e57-b43b-f1118b1856bc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"})",
									"",
									"pm.test(\"Message is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"{{TRIP1_ID_USER3_DRIVER}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "/plannedtrips/:id/passengers",
			"description": "Tests for the passengers route of specific trips.",
			"item": [
				{
					"name": "chained-put-and-delete-tests",
					"description": "",
					"item": [
						{
							"name": "Make sure passenger is not in list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7506ba57-dfc0-40b6-9925-aec24d00f99e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Returns PUT operation request\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"hydra:operation\"][0][\"hydra:method\"]).to.eql(\"PUT\");",
											"});",
											"",
											"pm.test(\"Returns DELETE operation request\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"hydra:operation\"][1][\"hydra:method\"]).to.eql(\"DELETE\");",
											"});",
											"",
											"var body = JSON.parse(responseBody);",
											"tests[\"Does not include passenger\"] = (body.passengers.indexOf(\"/users/\" + environment.USER2_ID) == -1);"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER1_JWT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}/passengers",
									"host": [
										"{{ROOT_URL}}"
									],
									"path": [
										"plannedtrips",
										"{{TRIP1_ID_USER3_DRIVER}}",
										"passengers"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Add passenger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "352687ce-4d35-40b3-af33-3e172afb9986",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER2_JWT}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}/passengers",
									"host": [
										"{{ROOT_URL}}"
									],
									"path": [
										"plannedtrips",
										"{{TRIP1_ID_USER3_DRIVER}}",
										"passengers"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Make sure passenger is in list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2e77024-e952-4056-8637-a5f076a260da",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Returns PUT operation request\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"hydra:operation\"][0][\"hydra:method\"]).to.eql(\"PUT\");",
											"});",
											"",
											"pm.test(\"Returns DELETE operation request\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"hydra:operation\"][1][\"hydra:method\"]).to.eql(\"DELETE\");",
											"});",
											"",
											"var body = JSON.parse(responseBody);",
											"tests[\"Does include passenger\"] = (body.passengers.indexOf(\"/users/\" + environment.USER2_ID) != -1);"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER1_JWT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}/passengers",
									"host": [
										"{{ROOT_URL}}"
									],
									"path": [
										"plannedtrips",
										"{{TRIP1_ID_USER3_DRIVER}}",
										"passengers"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Delete passenger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "352687ce-4d35-40b3-af33-3e172afb9986",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER2_JWT}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}/passengers",
									"host": [
										"{{ROOT_URL}}"
									],
									"path": [
										"plannedtrips",
										"{{TRIP1_ID_USER3_DRIVER}}",
										"passengers"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Make sure passenger is not in list again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7506ba57-dfc0-40b6-9925-aec24d00f99e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Returns PUT operation request\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"hydra:operation\"][0][\"hydra:method\"]).to.eql(\"PUT\");",
											"});",
											"",
											"pm.test(\"Returns DELETE operation request\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"hydra:operation\"][1][\"hydra:method\"]).to.eql(\"DELETE\");",
											"});",
											"",
											"var body = JSON.parse(responseBody);",
											"tests[\"Does not include passenger\"] = (body.passengers.indexOf(\"/users/\" + environment.USER2_ID) == -1);"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER1_JWT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}/passengers",
									"host": [
										"{{ROOT_URL}}"
									],
									"path": [
										"plannedtrips",
										"{{TRIP1_ID_USER3_DRIVER}}",
										"passengers"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "OPTIONS - 401 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18d352ae-cdd5-4c52-b70f-3db541e299a9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}/passengers",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"{{TRIP1_ID_USER3_DRIVER}}",
								"passengers"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "OPTIONS - 200 - Authenticated - Authorized - Driver",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d60e583d-433d-469a-b871-843e77b0e323",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Access-Control-Allow-Methods is present\", function () {",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");",
									"});",
									"",
									"tests[\"Access-Control-Allow-Methods are correct\"] = postman.getResponseHeader(\"Access-Control-Allow-Methods\") === \"GET, DELETE, PUT, HEAD, OPTIONS\";"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER3_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}/passengers",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"{{TRIP1_ID_USER3_DRIVER}}",
								"passengers"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "OPTIONS - 200 - Authenticated - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "192f953c-a599-475f-808f-dbab36a0e8dd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Access-Control-Allow-Methods is present\", function () {",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");",
									"});",
									"",
									"tests[\"Access-Control-Allow-Methods are correct\"] = postman.getResponseHeader(\"Access-Control-Allow-Methods\") === \"GET, HEAD, OPTIONS\";"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}/passengers",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"{{TRIP1_ID_USER3_DRIVER}}",
								"passengers"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 401 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86a44733-9a5c-4a9a-a234-21cbe91b7867",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}/passengers",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"{{TRIP1_ID_USER3_DRIVER}}",
								"passengers"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 200 - Authenticated - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d2c908c-08e6-4fcf-accc-ab71a888f0e0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns PUT operation request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"hydra:operation\"][0][\"hydra:method\"]).to.eql(\"PUT\");",
									"});",
									"",
									"pm.test(\"Returns DELETE operation request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"hydra:operation\"][1][\"hydra:method\"]).to.eql(\"DELETE\");",
									"});",
									"",
									"pm.test(\"Returns passengers\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.passengers).to.exist;",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"    pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"})"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER3_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}/passengers",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"{{TRIP1_ID_USER3_DRIVER}}",
								"passengers"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET - 200 - Authenticated - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bedbfbc-4282-42e5-be37-ed8d37bc5996",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns PUT operation request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"hydra:operation\"][0][\"hydra:method\"]).to.eql(\"PUT\");",
									"});",
									"",
									"pm.test(\"Returns DELETE operation request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"hydra:operation\"][1][\"hydra:method\"]).to.eql(\"DELETE\");",
									"});",
									"",
									"pm.test(\"Returns passengers\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.passengers).to.exist;",
									"});",
									"",
									"pm.test(\"Body is valid\", function () {",
									"    pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json",
									"})"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER1_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}/passengers",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"{{TRIP1_ID_USER3_DRIVER}}",
								"passengers"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "PUT - 401 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86a44733-9a5c-4a9a-a234-21cbe91b7867",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}/passengers",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"{{TRIP1_ID_USER3_DRIVER}}",
								"passengers"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "DELETE - 401 - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86a44733-9a5c-4a9a-a234-21cbe91b7867",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{ROOT_URL}}/plannedtrips/{{TRIP1_ID_USER3_DRIVER}}",
							"host": [
								"{{ROOT_URL}}"
							],
							"path": [
								"plannedtrips",
								"{{TRIP1_ID_USER3_DRIVER}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "87fd0ade-4570-4361-8b6a-f7ec4296223f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8bfeaf0f-6feb-40a9-8c75-c2d7ff9cf273",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}